stages:
  - package
  - push
  - deploy

job_build_project:
  image: maven:3-jdk-8
  stage: package
  script:
    - mvn -f pom.xml package
  artifacts:
    paths:
      - ./target/*.jar
    reports:
      junit: ./target/test-results/*.xml
  only:
    - bot

docker_push:
  image: docker:20
  stage: push
  services:
    - docker:20-dind
  before_script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/$DOCKER_REGISTRY_USER/$DOCKER_IMAGE_NAME:latest -f ./Dockerfile .
    - docker push $DOCKER_REGISTRY/$DOCKER_REGISTRY_USER/$DOCKER_IMAGE_NAME:latest
  only:
    - bot

docker_deploy:
  image: alpine:latest
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 600 $LAPTOP_SSH_PRIVATE_KEY
    - touch ~/.ssh/known_hosts
    - echo "$LAPTOP_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -p $LAPTOP_SSH_PORT -i $LAPTOP_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $LAPTOP_SSH_USER@$LAPTOP_SSH_URL "docker pull $DOCKER_REGISTRY/$DOCKER_REGISTRY_USER/$DOCKER_IMAGE_NAME:latest && (docker container inspect $DOCKER_IMAGE_NAME >/dev/null 2>&1 && docker stop $DOCKER_IMAGE_NAME && docker container inspect $DOCKER_IMAGE_NAME >/dev/null 2>&1 && docker rm $DOCKER_IMAGE_NAME) || true && docker run -itd --name $DOCKER_IMAGE_NAME -p 8090:80 $DOCKER_REGISTRY_USER/$DOCKER_IMAGE_NAME:latest"
  only:
    - bot

